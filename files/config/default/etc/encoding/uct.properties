####
# UCT specific (Default Opencast Properties are fine for most encoding profiles)
#
# Profile definitions for the encoding service. UCT specific
#
# In order to understand how to configure a format, take a look a the
# documentation below:
#
# profile.<format>.name:
#     Name of the format, used in download dialogs of the frontend.
#
# profile.<format>.output:
#     Type of the distribution format.
#     [audio|visual|audiovisual|stream|enhancedaudio|image|imagesequence|cover|nothing]
#
# profile.<format>.suffix:
#     Extension that will be appended to the download.
#
# profile.<format>.mimetype:
#     Mime type used to provide proper content types.
#
# profile.<format>.input:
#     Track types for which this format is applicable.
#     [audio|visual|audiovisual|stream|enhancedaudio|image|imagesequence|cover|nothing]
##

## Some commands to handle bugs:
# -max_muxing_queue_size 4096
# https://discussion.mcebuddy2x.com/t/ffmpeg-bug-too-many-packets-buffered-for-output-stream/1148
# https://stackoverflow.com/questions/49686244/ffmpeg-too-many-packets-buffered-for-output-stream-01
# https://trac.ffmpeg.org/ticket/6375

# similar to uct-mp4-preview.dual.http
profile.mp4-download.dual.http.name = download video video (picture-by-picture)
profile.mp4-download.dual.http.input = visual
profile.mp4-download.dual.http.output = visual
profile.mp4-download.dual.http.suffix = -composite.mp4
profile.mp4-download.dual.http.mimetype = video/mp4
profile.mp4-download.dual.http.ffmpeg.command = -i #{in.video.path} #{compositeCommand} -c:v libx264 -preset medium -crf 23 -r 25 -profile:v high -pix_fmt yuv420p -tune film -movflags faststart -c:a aac -strict -2 -ar 44100 -ab 128k #{out.dir}/#{out.name}#{out.suffix}
profile.mp4-download.dual.http.jobload = 2.5

####################################################################################
# Parallel Encoding

profile.mp4-other.http.name = Presentation MP4 <480
profile.mp4-other.http.input = visual
profile.mp4-other.http.output = visual
profile.mp4-other.http.mimetype = video/mp4
profile.mp4-other.http.suffix = .mp4
profile.mp4-other.http.ffmpeg.command = -i #{in.video.path} \
  -c:v libx264 -preset medium -crf 23 -r 25 -profile:v high -level 4.0  -pix_fmt yuv420p -tune film  -movflags faststart \
  -c:a aac -strict -2 -ar 44100 -ab 128k #{out.dir}/#{out.name}#{out.suffix}
profile.mp4-other.http.jobload = 2.5

profile.mp4-480.http.name = Presentation MP4 480
profile.mp4-480.http.input = visual
profile.mp4-480.http.output = visual
profile.mp4-480.http.mimetype = video/mp4
profile.mp4-480.http.suffix = -480p.mp4
profile.mp4-480.http.ffmpeg.command = -i #{in.video.path} \
  -c:v libx264 -filter:v yadif,scale=-2:480 -preset medium -crf 23 -r 25 -profile:v high -level 4.0  -pix_fmt yuv420p -tune film  -movflags faststart \
  -c:a aac -strict -2 -ar 44100 -ab 128k #{out.dir}/#{out.name}#{out.suffix}
profile.mp4-480.http.jobload = 2.5

profile.mp4-480-720-parallel.http.name = Presentation MP4 480 and 720p
profile.mp4-480-720-parallel.http.input = visual
profile.mp4-480-720-parallel.http.output = visual
profile.mp4-480-720-parallel.http.mimetype = video/mp4
profile.mp4-480-720-parallel.http.suffix.medium-quality = -480p.mp4
profile.mp4-480-720-parallel.http.suffix.high-quality = -720p.mp4
profile.mp4-480-720-parallel.http.ffmpeg.command = -i #{in.video.path} \
  -c:v libx264 -filter:v yadif,scale=-2:480 -preset medium -crf 25 -r 25 -pix_fmt yuv420p -profile:v high -level 4.0  -pix_fmt yuv420p -tune film -movflags faststart -b:v 500k -maxrate 500k -bufsize 1000k \
  -c:a aac -strict -2 -ar 44100 -ac 1 -ab 128k -max_muxing_queue_size 20480 #{out.dir}/#{out.name}#{out.suffix.medium-quality} \
  -c:v libx264 -filter:v yadif,scale=-2:720 -preset medium -crf 23 -r 25 -pix_fmt yuv420p -profile:v high -level 4.0  -pix_fmt yuv420p -tune film -movflags faststart \
  -c:a aac -strict -2 -ar 44100 -ab 128k -max_muxing_queue_size 20480 #{out.dir}/#{out.name}#{out.suffix.high-quality}
profile.mp4-norm-480-720-parallel.http.jobload = 3.0

profile.mp4-480-720-1080-parallel.http.name = Presentation MP4 480, 720p and 1080 [normalized]
profile.mp4-480-720-1080-parallel.http.input = visual
profile.mp4-480-720-1080-parallel.http.output = visual
profile.mp4-480-720-1080-parallel.http.mimetype = video/mp4
profile.mp4-480-720-1080-parallel.http.suffix.low-quality = -480p.mp4
profile.mp4-480-720-1080-parallel.http.suffix.medium-quality = -720p.mp4
profile.mp4-480-720-1080-parallel.http.suffix.high-quality = -1080p.mp4
profile.mp4-480-720-1080-parallel.http.ffmpeg.command = -i #{in.video.path} \
  -c:v libx264 -filter:v yadif,scale=-2:480 -preset slower -crf 30 -r 25 -pix_fmt yuv420p -profile:v high -level 4.0  -pix_fmt yuv420p -tune film -movflags faststart -b:v 500k -maxrate 500k -bufsize 1000k \
  -c:a aac -strict -2 -ar 44100 -ac 1 -ab 128k -max_muxing_queue_size 20480 #{out.dir}/#{out.name}#{out.suffix.low-quality} \
  -c:v libx264 -filter:v yadif,scale=-2:720 -preset slower -crf 30 -r 25 -pix_fmt yuv420p -profile:v high -level 4.0  -pix_fmt yuv420p -tune film -movflags faststart \
  -c:a aac -strict -2 -ar 44100 -ab 128k -max_muxing_queue_size 20480 #{out.dir}/#{out.name}#{out.suffix.medium-quality} \
  -c:v libx264 -filter:v yadif,scale=-2:1080 -preset slower -crf 30 -r 25 -pix_fmt yuv420p -profile:v high -level 4.0  -pix_fmt yuv420p -tune film -movflags faststart \
  -c:a aac -strict -2 -ar 44100 -ab 128k -max_muxing_queue_size 20480 #{out.dir}/#{out.name}#{out.suffix.high-quality}
profile.mp4-norm-480-720-1080-parallel.http.jobload = 3.0

profile.mp4-norm-other.http.name = Presentation MP4 <480 [normalized]
profile.mp4-norm-other.http.input = visual
profile.mp4-norm-other.http.output = visual
profile.mp4-norm-other.http.mimetype = video/mp4
profile.mp4-norm-other.http.suffix = .mp4
profile.mp4-norm-other.http.ffmpeg.command = -i #{in.video.path} \
  -c:v libx264 -preset medium -crf 23 -r 25 -profile:v high -level 4.0  -pix_fmt yuv420p -tune film  -movflags faststart \
  -c:a aac -strict -2 -ar 44100 -ab 128k -af loudnorm=I=-25:TP=-1.5 -max_muxing_queue_size 20480 #{out.dir}/#{out.name}#{out.suffix}
profile.mp4-norm-other.http.jobload = 2.5

profile.mp4-norm-480.http.name = Presentation MP4 480 [normalized]
profile.mp4-norm-480.http.input = visual
profile.mp4-norm-480.http.output = visual
profile.mp4-norm-480.http.mimetype = video/mp4
profile.mp4-norm-480.http.suffix = -480p.mp4
profile.mp4-norm-480.http.ffmpeg.command = -i #{in.video.path} \
  -c:v libx264 -filter:v yadif,scale=-2:480 -preset medium -crf 23 -r 25 -profile:v high -level 4.0  -pix_fmt yuv420p -tune film  -movflags faststart \
  -c:a aac -strict -2 -ar 44100 -ab 128k -af loudnorm=I=-25:TP=-1.5 -max_muxing_queue_size 20480  #{out.dir}/#{out.name}#{out.suffix}
profile.mp4-norm-480.http.jobload = 2.5

profile.mp4-norm-480-720-parallel.http.name = Presentation MP4 480 and 720p [normalized]
profile.mp4-norm-480-720-parallel.http.input = visual
profile.mp4-norm-480-720-parallel.http.output = visual
profile.mp4-norm-480-720-parallel.http.mimetype = video/mp4
profile.mp4-norm-480-720-parallel.http.suffix.medium-quality = -480p.mp4
profile.mp4-norm-480-720-parallel.http.suffix.high-quality = -720p.mp4
profile.mp4-norm-480-720-parallel.http.ffmpeg.command = -i #{in.video.path} \
  -c:v libx264 -filter:v yadif,scale=-2:480 -preset slower -crf 30 -r 25 -pix_fmt yuv420p -profile:v high -level 4.0  -pix_fmt yuv420p -tune film -movflags faststart -b:v 500k -maxrate 500k -bufsize 1000k \
  -c:a aac -strict -2 -ar 44100 -ac 1 -ab 128k -af loudnorm=I=-25:TP=-1.5 #{out.dir}/#{out.name}#{out.suffix.medium-quality} \
  -c:v libx264 -filter:v yadif,scale=-2:720 -preset slower -crf 30 -r 25 -pix_fmt yuv420p -profile:v high -level 4.0  -pix_fmt yuv420p -tune film -movflags faststart \
  -c:a aac -strict -2 -ar 44100 -ab 128k -af loudnorm=I=-25:TP=-1.5 #{out.dir}/#{out.name}#{out.suffix.high-quality}
profile.mp4-norm-480-720-parallel.http.jobload = 3.0

profile.mp4-norm-480-720-1080-parallel.http.name = Presentation MP4 480, 720p and 1080 [normalized]
profile.mp4-norm-480-720-1080-parallel.http.input = visual
profile.mp4-norm-480-720-1080-parallel.http.output = visual
profile.mp4-norm-480-720-1080-parallel.http.mimetype = video/mp4
profile.mp4-norm-480-720-1080-parallel.http.suffix.low-quality = -480p.mp4
profile.mp4-norm-480-720-1080-parallel.http.suffix.medium-quality = -720p.mp4
profile.mp4-norm-480-720-1080-parallel.http.suffix.high-quality = -1080p.mp4
profile.mp4-norm-480-720-1080-parallel.http.ffmpeg.command = -i #{in.video.path} \
  -c:v libx264 -filter:v yadif,scale=-2:480 -preset slower -crf 30 -r 25 -pix_fmt yuv420p -profile:v high -level 4.0  -pix_fmt yuv420p -tune film -movflags faststart -b:v 500k -maxrate 500k -bufsize 1000k \
  -c:a aac -strict -2 -ar 44100 -ac 1 -ab 128k -af loudnorm=I=-25:TP=-1.5 #{out.dir}/#{out.name}#{out.suffix.low-quality} \
  -c:v libx264 -filter:v yadif,scale=-2:720 -preset slower -crf 30 -r 25 -pix_fmt yuv420p -profile:v high -level 4.0  -pix_fmt yuv420p -tune film -movflags faststart \
  -c:a aac -strict -2 -ar 44100 -ab 128k -af loudnorm=I=-25:TP=-1.5 #{out.dir}/#{out.name}#{out.suffix.medium-quality} \
  -c:v libx264 -filter:v yadif,scale=-2:1080 -preset slower -crf 30 -r 25 -pix_fmt yuv420p -profile:v high -level 4.0  -pix_fmt yuv420p -tune film -movflags faststart \
  -c:a aac -strict -2 -ar 44100 -ab 128k -af loudnorm=I=-25:TP=-1.5 #{out.dir}/#{out.name}#{out.suffix.high-quality}
profile.mp4-norm-480-720-1080-parallel.http.jobload = 3.0

####################################################################################
# Copy audio to another flavor - #{in.video.suffix}
profile.copy.audio.name = copy audio
profile.copy.audio.input = audio
profile.copy.audio.output = audio
profile.copy.audio.suffix = .flac
profile.copy.audio.mimetype = audio/flac
profile.copy.audio.ffmpeg.command = -i #{in.video.path} #{out.dir}/#{out.name}#{out.suffix}
profile.copy.audio.jobload = 1.0

# for-audio.only
profile.for-audio.only.name = for audio only
profile.for-audio.only.input = audio
profile.for-audio.only.output = visual
profile.for-audio.only.suffix = .mkv
profile.for-audio.only.mimetype = video/x-matroska
profile.for-audio.only.ffmpeg.command = -loop 1 -i /opt/opencast/etc/branding/no_audio.png -i #{in.video.path} -c:a aac -strict -2 -ar 44100 -ab 128k #{out.dir}/#{out.name}#{out.suffix}
profile.for-audio.only.jobload = 1.5

# Mux one audio and one video stream
#   This command will take two files (video and audio) and mux the contained
#   streams.  The container format used is the same as it was for the source
#   video file. The streams will not be re-encoded, but if the duration of both
#   streams differ, the longer one will be cut.
profile.uct-mux-av-stereo.work.name = mux audio and video
profile.uct-mux-av-stereo.work.input = stream
profile.uct-mux-av-stereo.work.output = visual
profile.uct-mux-av-stereo.work.suffix = -work.mkv
profile.uct-mux-av-stereo.work.mimetype = video/x-matroska
profile.uct-mux-av-stereo.work.ffmpeg.command = -i #{in.video.path} -i #{in.audio.path} -shortest -acodec copy -r:v 25 -c:v libx264 -preset veryfast -pix_fmt yuv420p -crf 18 -max_muxing_queue_size 20480 #{out.dir}/#{out.name}#{out.suffix}
profile.uct-mux-av-stereo.work.jobload = 2.5

# !!! This encoding profile is used with a workflow property that is either set to stereo/left/right
# !!! search for 'uct-mux-av-' to find it

profile.uct-mux-av-left.work.name = mux audio and video
profile.uct-mux-av-left.work.input = stream
profile.uct-mux-av-left.work.output = visual
profile.uct-mux-av-left.work.suffix = -work.mkv
profile.uct-mux-av-left.work.mimetype = video/x-matroska
profile.uct-mux-av-left.work.ffmpeg.command = -i #{in.video.path} -i #{in.audio.path} -shortest -af "pan=mono|c0=FL+FC" -r:v 25 -c:v libx264 -c:a flac -preset veryfast -pix_fmt yuv420p -crf 18 -max_muxing_queue_size 20480 #{out.dir}/#{out.name}#{out.suffix}
profile.uct-mux-av-left.work.jobload = 2.5

profile.uct-mux-av-right.work.name = mux audio and video
profile.uct-mux-av-right.work.input = stream
profile.uct-mux-av-right.work.output = visual
profile.uct-mux-av-right.work.suffix = -work.mkv
profile.uct-mux-av-right.work.mimetype = video/x-matroska
profile.uct-mux-av-right.work.ffmpeg.command = -i #{in.video.path} -i #{in.audio.path} -shortest -af "pan=mono|c0=FR+FC" -r:v 25 -c:v libx264 -c:a flac -preset veryfast -pix_fmt yuv420p -crf 18 -max_muxing_queue_size 20480 #{out.dir}/#{out.name}#{out.suffix}
profile.uct-mux-av-right.work.jobload = 2.5

# Re-mux audiovisual stream
#   This command will take both a video and an audio streams from one source
#   file and muxes them into the same kind of container they were in before. A
#   general re-encoding will not happen, but if the duration of both streams
#   differ, the longer one will be cut.
#   Before: work.suffix = -work.#{in.video.suffix}
#   After:  work.suffix = -work.mkv

# !!! This encoding profile is used with a workflow property that is either set to stereo/left/right
# !!! search for 'uct-av-' to find it

profile.uct-av-left.work.name = Re-encode audiovisual track (Left)
profile.uct-av-left.work.input = stream
profile.uct-av-left.work.output = audiovisual
profile.uct-av-left.work.suffix = -work.mkv
profile.uct-av-left.work.ffmpeg.command = -i #{in.video.path} -shortest -af "pan=mono|c0=FL+FC" -r:v 25 -c:v libx264 -c:a flac -preset veryfast -pix_fmt yuv420p -crf 18 -max_muxing_queue_size 4096 #{out.dir}/#{out.name}#{out.suffix}
profile.uct-av-left.work.jobload = 2.5

profile.uct-av-right.work.name = Re-encode audiovisual track (Right)
profile.uct-av-right.work.input = stream
profile.uct-av-right.work.output = audiovisual
profile.uct-av-right.work.suffix = -work.mkv
profile.uct-av-right.work.ffmpeg.command = -i #{in.video.path} -shortest -af "pan=mono|c0=FR+FC" -r:v 25 -c:v libx264 -c:a flac -preset veryfast -pix_fmt yuv420p -crf 18 -max_muxing_queue_size 4096 #{out.dir}/#{out.name}#{out.suffix}
profile.uct-av-right.work.jobload = 2.5

profile.uct-av-stereo.work.name = Re-encode audiovisual track (stereo)
profile.uct-av-stereo.work.input = stream
profile.uct-av-stereo.work.output = audiovisual
profile.uct-av-stereo.work.suffix = -work.mkv
profile.uct-av-stereo.work.ffmpeg.command = -i #{in.video.path} -shortest -r:v 25 -c:v libx264 -preset veryfast -pix_fmt yuv420p -crf 18 -max_muxing_queue_size 4096 #{out.dir}/#{out.name}#{out.suffix}
profile.uct-av-stereo.work.jobload = 2.5

# Audio only (strip video)
#   This command will copy the audio streams into a new container. The
#   container type will be the same as it was used for the source video.
profile.uct-audio-only.work.name = audio only
profile.uct-audio-only.work.input = visual
profile.uct-audio-only.work.output = audio
profile.uct-audio-only.work.suffix = -work.flac
profile.uct-audio-only.work.mimetype = audio/flac
profile.uct-audio-only.work.ffmpeg.command = -i #{in.video.path} -c:a copy -vn #{out.dir}/#{out.name}#{out.suffix}
profile.uct-audio-only.work.jobload = 1.5

# Video only (strip audio)
#   This command will copy the video streams into a new container. The
#   container type will be the same as it was used for the source video.
profile.uct-video-only.work.name = video only
profile.uct-video-only.work.input = visual
profile.uct-video-only.work.output = visual
profile.uct-video-only.work.suffix = -work.mkv
profile.uct-video-only.work.mimetype = video/x-matroska
profile.uct-video-only.work.ffmpeg.command = -i #{in.video.path} -c:v copy -an #{out.dir}/#{out.name}#{out.suffix}
profile.uct-video-only.work.jobload = 1.5

# uct-copy
profile.uct-copy.work.name = video only
profile.uct-copy.work.input = stream
profile.uct-copy.work.output = audiovisual
profile.uct-copy.work.suffix = .mkv
profile.uct-copy.work.mimetype = video/x-matroska
profile.uct-copy.work.ffmpeg.command = -i #{in.video.path} -c:v libx264 -c:a copy -max_muxing_queue_size 20480 #{out.dir}/#{out.name}#{out.suffix}
profile.uct-copy.work.jobload = 1.5

####################################################################################
# NEW
# -af loudnorm=I=-25:TP=-1.5

profile.adaptive-parallel-2160-480.http.name = Parallel encoding MP4 - 480, 720, 1080, 2160
profile.adaptive-parallel-2160-480.http.input = visual
profile.adaptive-parallel-2160-480.http.output = visual
profile.adaptive-parallel-2160-480.http.jobload = 3.0
profile.adaptive-parallel-2160-480.http.suffix.2160p-quality = -2160p.mp4
profile.adaptive-parallel-2160-480.http.suffix.1080p-quality = -1080p.mp4
profile.adaptive-parallel-2160-480.http.suffix.720p-quality = -720p.mp4
profile.adaptive-parallel-2160-480.http.suffix.480p-quality = -480p.mp4
profile.adaptive-parallel-2160-480.http.ffmpeg.command = -i #{in.video.path} \
  -c:v libx264 -crf 23 -maxrate 10000k -bufsize 10000k -profile:v high -level 4.0 -pix_fmt yuv420p \
    -x264opts keyint=25:min-keyint=25:no-scenecut -movflags +faststart -vf scale='-2:min(ih\\,2160)',fps=fps=25 \
    -c:a aac -b:a 128k -ac 1 -f mp4 -max_muxing_queue_size 4096 #{out.dir}/#{out.name}#{out.suffix.2160p-quality} \
  -c:v libx264 -crf 23 -maxrate 4000k -bufsize 8000k -profile:v high -level 4.0 -pix_fmt yuv420p \
    -x264opts keyint=25:min-keyint=25:no-scenecut -movflags +faststart -vf scale='-2:min(ih\\,1080)',fps=fps=25 \
    -c:a aac -b:a 128k -ac 1 -f mp4 -max_muxing_queue_size 4096 #{out.dir}/#{out.name}#{out.suffix.1080p-quality} \
  -c:v libx264 -crf 23 -maxrate 1200k -bufsize 2400k -profile:v high -level 4.0 -pix_fmt yuv420p \
    -x264opts keyint=25:min-keyint=25:no-scenecut -movflags +faststart -vf scale='-2:min(ih\\,720)',fps=fps=25 \
    -c:a aac -b:a 128k -ac 1 -f mp4 -max_muxing_queue_size 4096 #{out.dir}/#{out.name}#{out.suffix.720p-quality} \
  -c:v libx264 -crf 23 -maxrate 800k -bufsize 800k -profile:v high -level 4.0 -pix_fmt yuv420p \
    -x264opts keyint=25:min-keyint=25:no-scenecut -movflags +faststart -vf scale='-2:min(ih\\,480)',fps=fps=25 \
    -c:a aac -b:a 96k -ac 1 -f mp4 -max_muxing_queue_size 4096 #{out.dir}/#{out.name}#{out.suffix.480p-quality}

profile.adaptive-parallel-1080-480.http.name = Parallel encoding MP4 - 480, 720, 1080
profile.adaptive-parallel-1080-480.http.input = visual
profile.adaptive-parallel-1080-480.http.output = visual
profile.adaptive-parallel-1080-480.http.jobload = 3.0
profile.adaptive-parallel-1080-480.http.suffix.1080p-quality = -1080p.mp4
profile.adaptive-parallel-1080-480.http.suffix.720p-quality = -720p.mp4
profile.adaptive-parallel-1080-480.http.suffix.480p-quality = -480p.mp4
profile.adaptive-parallel-1080-480.http.ffmpeg.command = -i #{in.video.path} \
  -c:v libx264 -crf 23 -maxrate 4000k -bufsize 8000k -profile:v high -level 4.0 -pix_fmt yuv420p \
    -x264opts keyint=25:min-keyint=25:no-scenecut -movflags +faststart -vf scale='-2:min(ih\\,1080)',fps=fps=25 \
    -c:a aac -b:a 128k -ac 1 -f mp4 -max_muxing_queue_size 4096 #{out.dir}/#{out.name}#{out.suffix.1080p-quality} \
  -c:v libx264 -crf 23 -maxrate 1200k -bufsize 2400k -profile:v high -level 4.0 -pix_fmt yuv420p \
    -x264opts keyint=25:min-keyint=25:no-scenecut -movflags +faststart -vf scale='-2:min(ih\\,720)',fps=fps=25 \
    -c:a aac -b:a 128k -ac 1 -f mp4 -max_muxing_queue_size 4096 #{out.dir}/#{out.name}#{out.suffix.720p-quality} \
  -c:v libx264 -crf 23 -maxrate 800k -bufsize 800k -profile:v high -level 4.0 -pix_fmt yuv420p \
    -x264opts keyint=25:min-keyint=25:no-scenecut -movflags +faststart -vf scale='-2:min(ih\\,480)',fps=fps=25 \
    -c:a aac -b:a 96k -ac 1 -f mp4 -max_muxing_queue_size 4096 #{out.dir}/#{out.name}#{out.suffix.480p-quality}

profile.adaptive-parallel-720-480.http.name = Parallel encoding MP4 - 480, 720
profile.adaptive-parallel-720-480.http.input = visual
profile.adaptive-parallel-720-480.http.output = visual
profile.adaptive-parallel-720-480.http.jobload = 3.0
profile.adaptive-parallel-720-480.http.suffix.1080p-quality = -1080p.mp4
profile.adaptive-parallel-720-480.http.suffix.720p-quality = -720p.mp4
profile.adaptive-parallel-720-480.http.suffix.480p-quality = -480p.mp4
profile.adaptive-parallel-720-480.http.ffmpeg.command = -i #{in.video.path} \
  -c:v libx264 -crf 23 -maxrate 1200k -bufsize 2400k -profile:v high -level 4.0 -pix_fmt yuv420p \
    -x264opts keyint=25:min-keyint=25:no-scenecut -movflags +faststart -vf scale='-2:min(ih\\,720)',fps=fps=25 \
    -c:a aac -b:a 128k -ac 1 -f mp4 -max_muxing_queue_size 4096 #{out.dir}/#{out.name}#{out.suffix.720p-quality} \
  -c:v libx264 -crf 23 -maxrate 800k -bufsize 800k -profile:v high -level 4.0 -pix_fmt yuv420p \
    -x264opts keyint=25:min-keyint=25:no-scenecut -movflags +faststart -vf scale='-2:min(ih\\,480)',fps=fps=25 \
    -c:a aac -b:a 96k -ac 1 -f mp4 -max_muxing_queue_size 4096 #{out.dir}/#{out.name}#{out.suffix.480p-quality}

profile.uct-mp4-preview.http.name = preview video
profile.uct-mp4-preview.http.input = visual
profile.uct-mp4-preview.http.output = visual
profile.uct-mp4-preview.http.suffix = -preview.mp4
profile.uct-mp4-preview.http.ffmpeg.command = -i #{in.video.path} -c:v libx264 -filter:v yadif,scale=-2:360 -preset veryfast -crf 23 -profile:v baseline -pix_fmt yuv420p -tune film  -movflags faststart -c:a aac -strict -2 -ar 44100 -ab 128k -max_muxing_queue_size 4096 #{out.dir}/#{out.name}#{out.suffix}
profile.uct-mp4-preview.http.jobload = 2.5

profile.uct-mp4-preview.dual.http.name = preview video (picture-by-picture)
profile.uct-mp4-preview.dual.http.input = visual
profile.uct-mp4-preview.dual.http.output = visual
profile.uct-mp4-preview.dual.http.suffix = -preview-composite.mp4
profile.uct-mp4-preview.dual.http.ffmpeg.command = -i #{in.video.path} #{compositeCommand} -c:v libx264 -preset veryfast -crf 23 -profile:v baseline -pix_fmt yuv420p -tune film -movflags faststart -c:a aac -strict -2 -ar 44100 -ab 128k -max_muxing_queue_size 4096 #{out.dir}/#{out.name}#{out.suffix}
profile.uct-mp4-preview.dual.http.jobload = 2.5

####################################################################################
## Retention Cycle Encoding profiles - used in uct-import-from-stream

profile.uct.trimmed-to-source.name = composite
profile.uct.trimmed-to-source.input = visual
profile.uct.trimmed-to-source.output = visual
profile.uct.trimmed-to-source.suffix = -compound.mkv
profile.uct.trimmed-to-source.mimetype = video/x-matroska
profile.uct.trimmed-to-source.ffmpeg.command = -i #{in.video.path} -c:v libx265 -crf 18 -preset slow -c:a copy #{out.dir}/#{out.name}#{out.suffix}
profile.uct.trimmed-to-source.jobload = 3.0

profile.republish.mp4.name = re-publish to mp4
profile.republish.mp4.input = visual
profile.republish.mp4.output = visual
profile.republish.mp4.suffix = .mp4
profile.republish.mp4.mimetype = video/mp4
profile.republish.mp4.ffmpeg.command = -i #{in.video.path} -c:v libx264 -preset slow -crf 23 -r 25 -profile:v high -level 4.0  -pix_fmt yuv420p -movflags faststart -c:a aac -strict -2 -ar 44100 -ab 128k #{out.dir}/#{out.name}#{out.suffix}
profile.republish.mp4.jobload = 2.5

profile.input-to-src-265.mkv.name = encode input to mkv (x265)
profile.input-to-src-265.mkv.input = visual
profile.input-to-src-265.mkv.output = visual
profile.input-to-src-265.mkv.suffix = .mkv
profile.input-to-src-265.mkv.mimetype = video/x-matroska
profile.input-to-src-265.mkv.ffmpeg.command = -i #{in.video.path} -c:v libx265 -crf 23 -preset faster -c:a copy #{out.dir}/#{out.name}#{out.suffix}
profile.input-to-src-265.mkv.jobload = 3
